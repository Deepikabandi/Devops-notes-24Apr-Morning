ANSIBLE
===========================================

Ansible Notes

Create 2 instances and start them

Set up on ACM:
********************************

Step1: 
**************
go to vim /etc/ssh/sshd_config

	i
scroll down
remove the # for  password Authentication Yes
Add # for 	  password Authentication No

:wq!

Step 2:
**************
Create password for ec2-user

# passwd ec2-user
Newpassword:
ConfirmPassword:

********************
Step 3:
***********

Add ec2-user in sudoers files and give all permission

# vim /etc/sudoers

i
scroll down

under root add like this

ec2-user ALL=NOPASSWD: ALL

**************************
Step 4:

Restart your sshd connection

# systemctl restart sshd

*******************

Repeat all the 4 steps on Host machine also and restart the sshd connection on host machine.

************************

Install Ansible :

Step 1:
*************

# yum list | grep ansible  // you will not find ansible package as default in yum

So install epel replositories and it will ass ansible to yum repository


	# yum install epel-release

// copy the command sudo amazon-linux-extras install epel and execute it

	# sudo amazon-linux-extras install epel

give y

Complete!

You will ansible package is now available with yum

	# yum list | grep ansible

//ansible will be available (wait for few seconds)


	# yum install ansible

press y
again press y
Complete!

	# ansible --version

version of ansible isntalled will be displayed.

*****************************************
CREATE INVENTORY ON ACM and ADD Host details
*****************************************

# vim /etc/ansible/hosts

Scroll down to end and add

[webservers]
paste private ip of host ==> 172.31.39.169

:wq!

***********************************************

OPEN SECURE SHELL CONNECTION 

***********************************************

Step 1: change to ec2-user

	# su - ec2-user

	# ssh-keygen

press enter
press enter
press enter

ssh key will be generated

Step 2: copy key on to the host

	# ssh-copy-id -i ec2-user@private ip of host

press yes
enter passowrd ==>

ssh connection will be done
In the message we will have a command to loginto the host from ACM, execute it

	# ssh 'ec2-user@172.31.35.169'

we will be connected to the host

exit
back to ACM

*****************************************
Modules in ANSIBLE

1. adhoc ping command

# ansible -m ping webservers

response will be a pong from all hosts under webservers


Module2 : command

# ansible -m command -a "uptime" webservers

will give the uptime of hosts in webservers


To chekc all modules in ansible

# ansible-doc -l

use up arrow key and down arrow key to scroll up and down.
press q to exit
********************************

Playbook2 -- For TomCat

# sudo vim playbook2.yml

i

---
- hosts: webservers
  become: true
  become_user: root
  tasks:
  - name: install tomcat
    yum: name=tomcat state=present
  - name: start tomcat
    service: name=tomcat state=started
  - name: deploy war file
    get_url:
     url=https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/sample.war
     dest=/usr/share/tomcat/webapps
    notify: restart tomcat
  handlers:
   - name: restart tomcat
     service: name=tomcat state=restarted

Syntax check:

# ansible-playbook playbook1.yml --syntax-check

# ansible-playbook playbook1.yml

********************************************

playbook.yml (httpd) and deploy a html page

# sudo vim playbook.yml

i

---
- hosts: webservers
  become: true
  become_user: root
  tasks:
  - name: install httpd
    yum: name=httpd state=present
  - name: start httpd
    service: name=httpd state=started
  - name: deploy html file
    copy: src=/etc/ansible/index.html dest=/var/www/html
    notify: restart httpd
  handlers:
  - name: restart httpd
    service: name=httpd state=restarted

:wq!

Check syntax

	# ansible-playbook playbook.yml --syntax-check
Now run the playbook

	# ansible-playbook playbook.yml


*************************************

docker deplyment

---
- hosts: webservers
  become: true
  become_user: root
  tasks:
  - name: install docker
    yum: name=docker state=present
  - name: start docker
    service: name=docker state=started
  - name: install git
    yum: name=git state=present
  - name: get the dockerfile from githib
    git: repo=https://github.com/Sonal0409/dockerdemo.git dest=/tmp/gitrepo
  - name: build dockerfile
    command: chdir=/tmp/gitrepo docker build -t deployimage:ansible .
  - name: run the dockerfile
    command: docker run -itd -P deployimage:ansible

*****************************************

Jenkins Ansible Pipeline:

============================================

pipeline{
    
    agent any
    stages{
        stage('clone the repo')
        {
            steps{
                git branch: 'main', url: 'https://github.com/Sonal0409/myansible.git'
            }
        }
        
        stage('Execute playbook')
        {
            steps{
                ansiblePlaybook credentialsId: 'ansible_host_credentials', disableHostKeyChecking: true, installation: 'myansible', inventory: 'dev.inv', playbook: 'playbook1.yml'
            }
        }
    }
}

=======================================================

Terraform Notes:
=====================================================


Demo 1: Install terraform in EC2 server:

wget https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip

unzip terraform_1.4.6_linux_amd64.zip

 mv terraform /usr/local/bin

=====================================================

Demo 2: Create Accesskey and secret in AWS, that terraform will use for authetication

Our provider is AWS

We need create an new user in AWS whose credentials will be provided to terraform -- IAM service on AWS will be used

In AWS 

IAM > Users > click on add user > give a username > click next > select Attach policies directly > select AdministratorAccess below >> click on next > click on create user.

Now lets attach access key and secret key to the user.

Click on username>> click on security credentials > Select Access keys> click on create access key
 > sleect Command Line Interface (CLI)
> click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key

===============================================

Demo 3: Write tf code to configure to AWS provider.

For this go terraform registry : https://registry.terraform.io/

**
 configure the provider with the proper credentials before you can use it.


Introcution to provider Block

provider "name" {

//credenatail information

}

provider "aws" {
  region     = "us-west-2"
  access_key = "AKIAUJU24ZR3ZBGGXT4E"
  secret_key = "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"
}

Inititae terraform to download provider plugin

Execute below command.

# terraform init

===================================================

Demo 4: Write a Resource block that will create ec2 instance on AWS

provider "aws" {
  region     = "us-west-2"
  access_key = 
  secret_key = "
}

resource "aws_instance" "myec2"{

ami = "ami-0ac64ad8517166fb1"
instance_type = "t2.micro"

tags = {
    Name = "terraforminstance"
  }

}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  count         = 5

  tags = {
    Name = "${var.environment}-${count.index}"
  }

=======================================

Demo 5: Variable Block in terraform
==========================================
variable "name" {

default = "value"

}



variable "access_key" {
default = 
}

variable "secret_key" {
default = 
}

varibale "ami" {
default = "ami-0ac64ad8517166fb1"
}

variable "instance_type" {
default = "t2.micro"
}


/root/.aws/credentials


==============================================

Demo 6: AWS infrastructure creation using terraform:

provider "aws" {
  region     = "us-west-2"
  access_key = var.access_key
  secret_key = var.secret_key
}

resource "aws_vpc" "edu-vpc" {
  cidr_block       = "10.0.0.0/16"

  tags = {
    Name = "edureka"
  }
}

resource "aws_subnet" "subnet-1" {
  vpc_id     = aws_vpc.edu-vpc.id
  cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = true
  depends_on = [aws_vpc.edu-vpc]
  availability_zone = "us-west-2a"

  tags = {
    Name = "edu-subnet"
  }
}

resource "aws_route_table" "edu-route-table" {
  vpc_id = aws_vpc.edu-vpc.id

  tags = {
    Name = "edureka"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.edu-route-table.id
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.edu-vpc.id
  depends_on = [aws_vpc.edu-vpc]
}

resource "aws_route" "edu-route" {
  route_table_id            = aws_route_table.edu-route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.gw.id
 }

resource "aws_security_group" "allow_web" {
  name        = "allow_web_traffic"
  description = "Allow web inbound traffic"
  vpc_id      = aws_vpc.edu-vpc.id

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
 ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_web"
  }
}

resource "tls_private_key" "web-key" {
 algorithm = "RSA"
}

resource "aws_key_pair" "app-instance-key" {

 key_name = "web-key"
 public_key = tls_private_key.web-key.public_key_openssh
}

resource local_file "web-key" {

 content = tls_private_key.web-key.private_key_pem
 filename = "web-key.pem"
}

resource "aws_instance" "myec2"{

ami = "ami-0ac64ad8517166fb1"
instance_type = "t2.micro"

tags = {
    Name = "terraforminstance"
  }
subnet_id = aws_subnet.subnet-1.id
key_name = "web-key"
security_groups = [aws_security_group.allow_web.id]

provisioner "remote-exec" {

connection {
 type = "ssh"
 user = "ec2-user"
 private_key = tls_private_key.web-key.private_key_pem
 host = aws_instance.myec2.public_ip
}

inline = [

"sudo yum install httpd -y",
"sudo systemctl start httpd",
"sudo systemctl enable httpd"
]

}


}
































